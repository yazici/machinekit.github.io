.TH ABS_S32 "9" "2016-07-09" "Machinekit Documentation" "HAL Component"
.de TQ
.br
.ns
.TP \\$1
..

.SH INSTANTIABLE COMPONENTS
.HP
.HP
.B All instantiable components can be loaded in two manners

.LP
.B Using loadrt with or without count= | names= parameters as per legacy components

.LP
.B Using newinst, which names the instance and allows further parameters and arguments,

.LP
.B primarily pincount= which can set the number of pins created for that instance (where applicable)

.HP
.RE
.SH NAME
.HP
.HP
abs_s32 \- Compute the absolute value and sign of the input signal
.SH SYNOPSIS
.HP
.HP
abs_s32
.SH USAGE SYNOPSIS
.HP
.HP
.B loadrt abs_s32 
.LP
.B newinst abs_s32 <newinstname> [ pincount=\fIN\fB | iprefix=\fIprefix\fB ]
.B                             [instanceparamX=\fIX\fB | argX=\fIX\fB ]
.HP
( args in [ ] denote possible args and parameters, may not be used in all components )
.HP

.SH FUNCTIONS
.HP
.HP
.TP
\fBabs_s32.N.funct\fR 
( OR
\fB<newinstname>.funct\fR  )
.HP

.SH PINS
.HP
.HP
.TP
.B abs_s32.N.in \fR s32 in \fR
( OR
.B <newinstname>.in \fR s32 in \fR )

.HP
input value
.TP
.B abs_s32.N.out \fR s32 out \fR
( OR
.B <newinstname>.out \fR s32 out \fR )

.HP
output value, always non-negative
.TP
.B abs_s32.N.sign \fR bit out \fR
( OR
.B <newinstname>.sign \fR bit out \fR )

.HP
Sign of input, false for positive, true for negative
.TP
.B abs_s32.N.is_positive \fR bit out \fR
( OR
.B <newinstname>.is_positive \fR bit out \fR )

.HP
true if input is positive, false if input is 0 or negative
.TP
.B abs_s32.N.is_negative \fR bit out \fR
( OR
.B <newinstname>.is_negative \fR bit out \fR )

.HP
true if input is negative, false if input is 0 or positive
.SH LICENCE
.HP
.HP
GPL
.HP
