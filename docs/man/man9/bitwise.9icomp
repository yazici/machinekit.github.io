.TH BITWISE "9" "2016-07-09" "Machinekit Documentation" "HAL Component"
.de TQ
.br
.ns
.TP \\$1
..

.SH INSTANTIABLE COMPONENTS
.HP
.HP
.B All instantiable components can be loaded in two manners

.LP
.B Using loadrt with or without count= | names= parameters as per legacy components

.LP
.B Using newinst, which names the instance and allows further parameters and arguments,

.LP
.B primarily pincount= which can set the number of pins created for that instance (where applicable)

.HP
.RE
.SH NAME
.HP
.HP
bitwise \- Computes various bitwise operations on the two input values
.SH SYNOPSIS
.HP
.HP
bitwise
.SH USAGE SYNOPSIS
.HP
.HP
.B loadrt bitwise 
.LP
.B newinst bitwise <newinstname> [ pincount=\fIN\fB | iprefix=\fIprefix\fB ]
.B                             [instanceparamX=\fIX\fB | argX=\fIX\fB ]
.HP
( args in [ ] denote possible args and parameters, may not be used in all components )
.HP

.SH FUNCTIONS
.HP
.HP
.TP
\fBbitwise.N.funct\fR 
( OR
\fB<newinstname>.funct\fR  )
.HP

.SH PINS
.HP
.HP
.TP
.B bitwise.N.in0 \fR u32 in \fR
( OR
.B <newinstname>.in0 \fR u32 in \fR )

.HP
First input value
.TP
.B bitwise.N.in1 \fR u32 in \fR
( OR
.B <newinstname>.in1 \fR u32 in \fR )

.HP
Second input value
.TP
.B bitwise.N.out-and \fR u32 out \fR
( OR
.B <newinstname>.out-and \fR u32 out \fR )

.HP
The bitwise AND of the two inputs
.TP
.B bitwise.N.out-or \fR u32 out \fR
( OR
.B <newinstname>.out-or \fR u32 out \fR )

.HP
The bitwise OR of the two inputs
.TP
.B bitwise.N.out-xor \fR u32 out \fR
( OR
.B <newinstname>.out-xor \fR u32 out \fR )

.HP
The bitwise XOR of the two inputs
.TP
.B bitwise.N.out-nand \fR u32 out \fR
( OR
.B <newinstname>.out-nand \fR u32 out \fR )

.HP
The inverse of the bitwise AND
.TP
.B bitwise.N.out-nor \fR u32 out \fR
( OR
.B <newinstname>.out-nor \fR u32 out \fR )

.HP
The inverse of the bitwise OR
.TP
.B bitwise.N.out-xnor \fR u32 out \fR
( OR
.B <newinstname>.out-xnor \fR u32 out \fR )

.HP
The inverse of the bitwise XOR
.SH AUTHOR
.HP
.HP
Andy Pugh
.HP
.SH LICENCE
.HP
.HP
GPL 2+
.HP
