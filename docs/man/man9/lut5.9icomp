.TH LUT5 "9" "2016-07-09" "Machinekit Documentation" "HAL Component"
.de TQ
.br
.ns
.TP \\$1
..

.SH INSTANTIABLE COMPONENTS
.HP
.HP
.B All instantiable components can be loaded in two manners

.LP
.B Using loadrt with or without count= | names= parameters as per legacy components

.LP
.B Using newinst, which names the instance and allows further parameters and arguments,

.LP
.B primarily pincount= which can set the number of pins created for that instance (where applicable)

.HP
.RE
.SH NAME
.HP
.HP
lut5 \- Arbitrary 5-input logic function based on a look-up table
.SH SYNOPSIS
.HP
.HP
lut5
.SH USAGE SYNOPSIS
.HP
.HP
.B loadrt lut5 
.LP
.B newinst lut5 <newinstname> [ pincount=\fIN\fB | iprefix=\fIprefix\fB ]
.B                             [instanceparamX=\fIX\fB | argX=\fIX\fB ]
.HP
( args in [ ] denote possible args and parameters, may not be used in all components )
.HP

.SH DESCRIPTION
.HP
.HP

lut5 constructs a logic function with up to 5 inputs using a lookup table.
The value for *function* can be
determined by writing the truth table, and computing the sum of all
the *weights* for which the output value would be *true*.
The weights are hexadecimal not decimal so hexadecimal math must be used to
sum the weights. A wiki page has a calculator to assist in computing the proper
value for function.

http://wiki.linuxcnc.org/cgi-bin/wiki.pl?Lut5

Note that LUT5 will generate any of the 4,294,967,296 logical functions of 
5 inputs so AND, OR, NAND, NOR, XOR and every other combinatorial function is possible.

Example Functions

A 5-input
function is true only when all the inputs are true, so the correct
value for function is 0x80000000.

A 2-input OR function would be the sum of 0x2 + 0x4 + 0x8, 
so the correct value for function is 0xe.

A 5-input OR
function is true whenever any of the inputs are true, so the correct value for
function is 0xfffffffe. Because every weight except 0x1
is true the function is the sum of every line except the first one.

A 2-input XOR function is
true whenever exactly one of the inputs is true, so the correct value for
function is 0x6.  
Only in-0 and in-1 should be connected to signals, 
because if any other bit is TRUE then the output will be FALSE.

.SH EXTRA INFO
.HP
.HP

.TS
\{\
box tab(;);
cb s s s s s
cb cb cb cb cb | cb
c  c  c  c  c  | r.
Weights for each line of truth table
_
Bit 4;Bit 3;Bit 2;Bit 1;Bit 0; Weight
_
0;0;0;0;0;0x1
0;0;0;0;1;0x2
0;0;0;1;0;0x4
0;0;0;1;1;0x8
0;0;1;0;0;0x10
0;0;1;0;1;0x20
0;0;1;1;0;0x40
0;0;1;1;1;0x80
0;1;0;0;0;0x100
0;1;0;0;1;0x200
0;1;0;1;0;0x400
0;1;0;1;1;0x800
0;1;1;0;0;0x1000
0;1;1;0;1;0x2000
0;1;1;1;0;0x4000
0;1;1;1;1;0x8000
1;0;0;0;0;0x10000
1;0;0;0;1;0x20000
1;0;0;1;0;0x40000
1;0;0;1;1;0x80000
1;0;1;0;0;0x100000
1;0;1;0;1;0x200000
1;0;1;1;0;0x400000
1;0;1;1;1;0x800000
1;1;0;0;0;0x1000000
1;1;0;0;1;0x2000000
1;1;0;1;0;0x4000000
1;1;0;1;1;0x8000000
1;1;1;0;0;0x10000000
1;1;1;0;1;0x20000000
1;1;1;1;0;0x40000000
1;1;1;1;1;0x80000000
.TE
\}

.SH FUNCTIONS
.HP
.HP
.TP
\fBlut5.N.funct\fR 
( OR
\fB<newinstname>.funct\fR  )
.HP

.SH PINS
.HP
.HP
.TP
.B lut5.N.in_0 \fR bit in \fR
( OR
.B <newinstname>.in_0 \fR bit in \fR )

.TP
.B lut5.N.in_1 \fR bit in \fR
( OR
.B <newinstname>.in_1 \fR bit in \fR )

.TP
.B lut5.N.in_2 \fR bit in \fR
( OR
.B <newinstname>.in_2 \fR bit in \fR )

.TP
.B lut5.N.in_3 \fR bit in \fR
( OR
.B <newinstname>.in_3 \fR bit in \fR )

.TP
.B lut5.N.in_4 \fR bit in \fR
( OR
.B <newinstname>.in_4 \fR bit in \fR )

.TP
.B lut5.N.out \fR bit out \fR
( OR
.B <newinstname>.out \fR bit out \fR )

.TP
.B lut5.N.function \fR u32 io \fR
( OR
.B <newinstname>.function \fR u32 io \fR )

.SH LICENCE
.HP
.HP
GPL
.HP
