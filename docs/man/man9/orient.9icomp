.TH ORIENT "9" "2016-07-09" "Machinekit Documentation" "HAL Component"
.de TQ
.br
.ns
.TP \\$1
..

.SH INSTANTIABLE COMPONENTS
.HP
.HP
.B All instantiable components can be loaded in two manners

.LP
.B Using loadrt with or without count= | names= parameters as per legacy components

.LP
.B Using newinst, which names the instance and allows further parameters and arguments,

.LP
.B primarily pincount= which can set the number of pins created for that instance (where applicable)

.HP
.RE
.SH NAME
.HP
.HP
orient \- Provide a PID command input for orientation mode based on current spindle position, target angle and orient mode
.SH SYNOPSIS
.HP
.HP
orient
.SH USAGE SYNOPSIS
.HP
.HP
.B loadrt orient 
.LP
.B newinst orient <newinstname> [ pincount=\fIN\fB | iprefix=\fIprefix\fB ]
.B                             [instanceparamX=\fIX\fB | argX=\fIX\fB ]
.HP
( args in [ ] denote possible args and parameters, may not be used in all components )
.HP

.SH DESCRIPTION
.HP
.HP

This component is designed to support a spindle orientation PID loop by providing a
command value, and fit with the motion spindle-orient support pins to support the M19 code.

The spindle is assumed to have stopped in an arbitrary position. The spindle
encoder position is linked to the  *position* pin.
The  current value of the position pin is sampled on a positive edge on the *enable* pin, and
*command* is computed and set as follows: floor(number of
full spindle revolutions
in the *position* sampled on positive edge)
plus *angle*/360 (the fractional revolution) +1/-1/0 depending on *mode*.

The *mode* pin is interpreted as follows:

0: the spindle rotates in the direction with the lesser angle,
which may be clockwise or counterclockwise.

1: the spindle rotates always rotates clockwise to the new angle.

2: the spindle rotates always rotates counterclockwise to the new angle.

HAL USAGE

On *motion.spindle-orient* disconnect the spindle control and connect to the orient-pid
loop:

loadrt orient names=orient

loadrt pid    names=orient-pid

net orient-angle  motion.spindle-orient-angle orient.angle

net orient-mode   motion.spindle-orient-mode  orient.mode

net orient-enable motion.spindle-orient       orient.enable orient-pid.enable

net spindle-pos    ...encoder..position orient.position orient-pid.feedback

net orient-command orient.command orient-pid.command


.SH FUNCTIONS
.HP
.HP
.TP
\fBorient.N.funct\fR 
( OR
\fB<newinstname>.funct\fR (requires a floating-point thread) )
.HP
Update *command* based on *enable*, *position*, *mode* and *angle*.
.SH PINS
.HP
.HP
.TP
.B orient.N.enable \fR bit in \fR
( OR
.B <newinstname>.enable \fR bit in \fR )

.HP
enable angular output for orientation mode
.TP
.B orient.N.mode \fR s32 in \fR
( OR
.B <newinstname>.mode \fR s32 in \fR )

.HP
0: rotate - shortest move; 1: always rotate clockwise; 2: always rotate counterclockwise
.TP
.B orient.N.position \fR float in \fR
( OR
.B <newinstname>.position \fR float in \fR )

.HP
spindle position input, unit 1 rev
.TP
.B orient.N.angle \fR float in \fR
( OR
.B <newinstname>.angle \fR float in \fR )

.HP
orient target position in degrees, 0 <= angle < 360
.TP
.B orient.N.command \fR float out \fR
( OR
.B <newinstname>.command \fR float out \fR )

.HP
target spindle position, input to PID command
.TP
.B orient.N.poserr \fR float out \fR
( OR
.B <newinstname>.poserr \fR float out \fR )

.HP
in degrees - aid for PID tuning
.SH AUTHOR
.HP
.HP
Michael Haberler
.HP
.SH LICENCE
.HP
.HP
GPL
.HP
