.TH TIME "9" "2016-07-09" "Machinekit Documentation" "HAL Component"
.de TQ
.br
.ns
.TP \\$1
..

.SH INSTANTIABLE COMPONENTS
.HP
.HP
.B All instantiable components can be loaded in two manners

.LP
.B Using loadrt with or without count= | names= parameters as per legacy components

.LP
.B Using newinst, which names the instance and allows further parameters and arguments,

.LP
.B primarily pincount= which can set the number of pins created for that instance (where applicable)

.HP
.RE
.SH NAME
.HP
.HP
time \- Time on in Hours, Minutes, Seconds
.SH SYNOPSIS
.HP
.HP
time
.SH USAGE SYNOPSIS
.HP
.HP
.B loadrt time 
.LP
.B newinst time <newinstname> [ pincount=\fIN\fB | iprefix=\fIprefix\fB ]
.B                             [instanceparamX=\fIX\fB | argX=\fIX\fB ]
.HP
( args in [ ] denote possible args and parameters, may not be used in all components )
.HP

.SH DESCRIPTION
.HP
.HP

Time

When the time.N.start bit goes true the cycle timer resets and starts
to time until time.N.start goes false. If you connect time.N.start to
halui.is-running as a cycle timer it will reset during a pause. See
the example connections below to keep the timer timing during a pause.

Time returns the hours, minutes, and seconds that time.N.start is true.

Sample pyVCP code to display the hours:minutes:seconds.

    <pyvcp>
      <hbox>
      <label>
        <text>"Cycle Time"</text>
        <font>("Helvetica",14)</font>
      </label>
      <u32>
          <halpin>"time-hours"</halpin>
          <font>("Helvetica",14)</font>
          <format>"2d"</format>
      </u32>
      <label>
        <text>":"</text>
        <font>("Helvetica",14)</font>
      </label>
      <u32>
          <halpin>"time-minutes"</halpin>
          <font>("Helvetica",14)</font>
          <format>"2d"</format>
      </u32>
      <label>
        <text>":"</text>
        <font>("Helvetica",14)</font>
      </label>
      <u32>
          <halpin>"time-seconds"</halpin>
          <font>("Helvetica",14)</font>
          <format>"2d"</format>
      </u32>
      </hbox>
    </pyvcp>

In your post-gui.hal file you might use the following to connect it up

 loadrt time
 loadrt not
 addf time.0 servo-thread
 addf not.0 servo-thread
 net prog-running not.0.in <= halui.program.is-idle
 net cycle-timer time.0.start <= not.0.out
 net cycle-seconds pyvcp.time-seconds <= time.0.seconds
 net cycle-minutes pyvcp.time-minutes <= time.0.minutes
 net cycle-hours pyvcp.time-hours <= time.0.hours

.SH FUNCTIONS
.HP
.HP
.TP
\fBtime.N.funct\fR 
( OR
\fB<newinstname>.funct\fR (requires a floating-point thread) )
.HP

.SH PINS
.HP
.HP
.TP
.B time.N.start \fR bit in \fR
( OR
.B <newinstname>.start \fR bit in \fR )

.HP
Timer On
.TP
.B time.N.seconds \fR u32 out \fR
( OR
.B <newinstname>.seconds \fR u32 out \fR )

.HP
Seconds
.TP
.B time.N.minutes \fR u32 out \fR
( OR
.B <newinstname>.minutes \fR u32 out \fR )

.HP
Minutes
.TP
.B time.N.hours \fR u32 out \fR
( OR
.B <newinstname>.hours \fR u32 out \fR )

.HP
Hours
.SH AUTHOR
.HP
.HP
John Thornton
.HP
.SH LICENCE
.HP
.HP
GPL
.HP
