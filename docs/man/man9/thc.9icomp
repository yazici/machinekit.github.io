.TH THC "9" "2016-07-09" "Machinekit Documentation" "HAL Component"
.de TQ
.br
.ns
.TP \\$1
..

.SH INSTANTIABLE COMPONENTS
.HP
.HP
.B All instantiable components can be loaded in two manners

.LP
.B Using loadrt with or without count= | names= parameters as per legacy components

.LP
.B Using newinst, which names the instance and allows further parameters and arguments,

.LP
.B primarily pincount= which can set the number of pins created for that instance (where applicable)

.HP
.RE
.SH NAME
.HP
.HP
thc \- Torch Height Control
.SH SYNOPSIS
.HP
.HP
thc
.SH USAGE SYNOPSIS
.HP
.HP
.B loadrt thc 
.LP
.B newinst thc <newinstname> [ pincount=\fIN\fB | iprefix=\fIprefix\fB ]
.B                             [instanceparamX=\fIX\fB | argX=\fIX\fB ]
.HP
( args in [ ] denote possible args and parameters, may not be used in all components )
.HP

.SH DESCRIPTION
.HP
.HP

Torch Height Control
Mesa THC > Encoder > Machinekit THC component

The Mesa THC sends a frequency based on the voltage detected to the encoder.
The velocity from the encoder is converted to volts with the velocity scale
parameter inside the THC component.

The THCAD card sends a frequency at 0 volts so the scale offset parameter is
used to zero the calculated voltage.

Component Functions
If enabled and torch is on and X + Y velocity is within tolerance of set speed
allow the THC to offset the Z axis as needed to maintain voltage.

If enabled and torch is off and the Z axis is moving up remove any correction
at a rate not to exceed the rate of movement of the Z axis.

If enabled and torch is off and there is no correction
pass the Z position and feed back untouched.

If not enabled pass the Z position and feed back untouched.

*Physical Connections*

Plasma Torch Arc Voltage Signal => 6 x 487k 1% resistors => THC Arc Voltage In

THC Frequency Signal => Encoder #0, pin A (Input)

Plasma Torch Arc OK Signal => input pin

output pin => Plasma Torch Start Arc Contacts

*HAL Plasma Connections*

encoder.nn.velocity => thc.encoder-vel (tip voltage)

motion.spindle-on => output pin (start the arc)

thc.arc-ok <= motion.digital-in-00 <= input pin (arc ok signal)

*HAL Motion Connections*

thc.requested-vel <= motion.requested-vel

thc.current-vel <= motion.current-vel


.SH FUNCTIONS
.HP
.HP
.TP
\fBthc.N.funct\fR 
( OR
\fB<newinstname>.funct\fR (requires a floating-point thread) )
.HP

.SH PINS
.HP
.HP
.TP
.B thc.N.encoder_vel \fR float in \fR
( OR
.B <newinstname>.encoder_vel \fR float in \fR )

.HP
Connect to hm2_5i20.0.encoder.00.velocity
.TP
.B thc.N.current_vel \fR float in \fR
( OR
.B <newinstname>.current_vel \fR float in \fR )

.HP
Connect to motion.current-vel
.TP
.B thc.N.requested_vel \fR float in \fR
( OR
.B <newinstname>.requested_vel \fR float in \fR )

.HP
Connect to motion.requested-vel
.TP
.B thc.N.volts_requested \fR float in \fR
( OR
.B <newinstname>.volts_requested \fR float in \fR )

.HP
Tip Volts current_vel >= min_velocity requested
.TP
.B thc.N.vel_tol \fR float in \fR
( OR
.B <newinstname>.vel_tol \fR float in \fR )

.HP
Velocity Tolerance (Corner Lock)
.TP
.B thc.N.torch_on \fR bit in \fR
( OR
.B <newinstname>.torch_on \fR bit in \fR )

.HP
Connect to motion.spindle-on
.TP
.B thc.N.arc_ok \fR bit in \fR
( OR
.B <newinstname>.arc_ok \fR bit in \fR )

.HP
Arc OK from Plasma Torch
.TP
.B thc.N.enable \fR bit in \fR
( OR
.B <newinstname>.enable \fR bit in \fR )

.HP
Enable the THC, if not enabled Z position is passed through
.TP
.B thc.N.z_pos_in \fR float in \fR
( OR
.B <newinstname>.z_pos_in \fR float in \fR )

.HP
Z Motor Position Command in from axis.n.motor-pos-cmd
.TP
.B thc.N.z_pos_out \fR float out \fR
( OR
.B <newinstname>.z_pos_out \fR float out \fR )

.HP
Z Motor Position Command Out
.TP
.B thc.N.z_fb_out \fR float out \fR
( OR
.B <newinstname>.z_fb_out \fR float out \fR )

.HP
Z Position Feedback to Axis
.TP
.B thc.N.volts \fR float out \fR
( OR
.B <newinstname>.volts \fR float out \fR )

.HP
The Calculated Volts
.TP
.B thc.N.vel_status \fR bit out \fR
( OR
.B <newinstname>.vel_status \fR bit out \fR )

.HP
When the THC thinks we are at requested speed
.TP
.B thc.N.vel_scale \fR float io \fR
( OR
.B <newinstname>.vel_scale \fR float io \fR )

.HP
The scale to convert the Velocity signal to Volts
.TP
.B thc.N.scale_offset \fR float io \fR
( OR
.B <newinstname>.scale_offset \fR float io \fR )

.HP
The offset of the velocity input at 0 volts
.TP
.B thc.N.velocity_tol \fR float io \fR
( OR
.B <newinstname>.velocity_tol \fR float io \fR )

.HP
The deviation percent from planned velocity
.TP
.B thc.N.voltage_tol \fR float io \fR
( OR
.B <newinstname>.voltage_tol \fR float io \fR )

.HP
The deviation of Tip Voltage before correction takes place
.TP
.B thc.N.correction_vel \fR float io \fR
( OR
.B <newinstname>.correction_vel \fR float io \fR )

.HP
The amount of change in user units per period to move Z to correct
.SH AUTHOR
.HP
.HP
John Thornton
.HP
.SH LICENCE
.HP
.HP
GPLv2 or greater
.HP
