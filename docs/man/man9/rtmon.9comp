.TH RTMON "9" "2016-07-09" "Machinekit Documentation" "HAL Component"
.de TQ
.br
.ns
.TP \\$1
..

.RE
.SH NAME
.HP
.HP
rtmon \- monitor RT faults and generate estop signal based on a parameterized function
.SH SYNOPSIS
.HP
.HP
.HP
.B loadrt rtmon
.SH DESCRIPTION
.HP
.HP

This component is an example how realtime faults (e.g. timing violations) can be dealt with. The realtime API (RTAPI)
only collects relevant events but does not act upon them; every RT fault causes a call to the RTAPI
exception handler, which is a function in RTAPI printing a message to the system log by default.

This exception handler may be overridden within a RT HAL component by means of the
rtapi_set_exception(new_handler) function. The arguments of the handler provide detail about the cause
of the fault.

The rtmon component intercepts this exception handler, and applies policy - for instance, to generate an
estop signal based on a set of parameters.

The scheme implemented here was inspired by Andy Pugh's smart serial code, which works as follows:

There is a programable increment, decrement and limit. If there is an
error then the error count increments, if no error it decrements, when
you hit the limit, you trigger a reaction.

No decrement = no fault healing. No increment = no fault reaction.

Assuming that the rtmon thread function is added to the servo thread (1mS) , then an increment of
100 and decrement of 1 and threshold of 500 would trigger a fault
reaction after 5 seconds of more than ten errors a second.

Another scenario could be where a certain amount of errors during startup is tolerated:
If you know that there will be 100 faults at startup, but those are
OK, but any later ones are a problem, then increment of 1, decrement
of zero and threshold of 101 (simplistically) gives that behaviour.

.SH FUNCTIONS
.HP
.HP
.TP
\fBrtmon\fR (requires a floating-point thread)

.SH PINS
.HP
.HP
.TP
.B rtmon.estop\fR bit out \fR
activated if more than <threshold> exceptions occur.
.TP
.B rtmon.estop-reset\fR bit in \fR
a positive edge on this pin clears the estop and fault_count pins
.TP
.B rtmon.rt-faults\fR u32 out \fR
total number of RT scheduling violations observed
.TP
.B rtmon.fault-count\fR u32 out \fR
current level for RT scheduling violations; reset on estop_reset positive edge
.TP
.B rtmon.stats-updates\fR u32 out \fR
total number of rtapi_task_update_stats() calls so far
.SH PARAMETERS
.HP
.HP
.TP
.B rtmon.fault-inc\fR u32 rw \fR(default: \fI1\fR)
increment fault_count by fault_inc for each RT fault detected
.TP
.B rtmon.fault-dec\fR u32 rw \fR(default: \fI0\fR)
decrement fault_count in each thread iteration
.TP
.B rtmon.fault-limit\fR u32 rw \fR(default: \fI1\fR)
if fault_count exceeds fault_limit, cause an estop
.TP
.B rtmon.autoclear-estop\fR bit rw \fR(default: \fI0\fR)
clear estop condition once fault_count reaches zero
.TP
.B rtmon.stats-divisor\fR u32 rw \fR(default: \fI1000\fR)
rtapi_task_update_stats() update frequency
.HP
.SH LICENCE
.HP
.HP
GPL
.HP
