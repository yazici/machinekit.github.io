.TH SAFETY_LATCH "9" "2016-07-09" "Machinekit Documentation" "HAL Component"
.de TQ
.br
.ns
.TP \\$1
..

.SH INSTANTIABLE COMPONENTS
.HP
.HP
.B All instantiable components can be loaded in two manners

.LP
.B Using loadrt with or without count= | names= parameters as per legacy components

.LP
.B Using newinst, which names the instance and allows further parameters and arguments,

.LP
.B primarily pincount= which can set the number of pins created for that instance (where applicable)

.HP
.RE
.SH NAME
.HP
.HP
safety_latch \- latch for error signals
.SH SYNOPSIS
.HP
.HP
safety_latch
.SH USAGE SYNOPSIS
.HP
.HP
.B loadrt safety_latch 
.LP
.B newinst safety_latch <newinstname> [ pincount=\fIN\fB | iprefix=\fIprefix\fB ]
.B                             [instanceparamX=\fIX\fB | argX=\fIX\fB ]
.HP
( args in [ ] denote possible args and parameters, may not be used in all components )
.HP

.SH DESCRIPTION
.HP
.HP

HAL component that implements a safety latch for error singnals
with customizable harm, healing and latching features.

When the component is not enabled the error input value is
forwarded to output without further modififactions.

If error-in is true the error count is increased by harm.
If error-in is false the error count is decreased by heal.
When the error count exceeds the threscold value error-out is
set to true. If latching is false the error-out pin will only
return to false when reset is set to true.

The inputs pin min and max clamp the error count value to a
specified range.

.SH FUNCTIONS
.HP
.HP
.TP
\fBsafety_latch.N.funct\fR 
( OR
\fB<newinstname>.funct\fR  )
.HP

.SH PINS
.HP
.HP
.TP
.B safety_latch.N.error_in \fR bit in \fR(default: \fIfalse\fR)
( OR
.B <newinstname>.error_in \fR bit in \fR(default: \fIfalse\fR) )

.HP
Error Input
.TP
.B safety_latch.N.heal \fR s32 in \fR(default: \fI1\fR)
( OR
.B <newinstname>.heal \fR s32 in \fR(default: \fI1\fR) )

.HP
Heal when ok per tick
.TP
.B safety_latch.N.harm \fR s32 in \fR(default: \fI1\fR)
( OR
.B <newinstname>.harm \fR s32 in \fR(default: \fI1\fR) )

.HP
Harm when error per tick
.TP
.B safety_latch.N.latching \fR bit in \fR(default: \fItrue\fR)
( OR
.B <newinstname>.latching \fR bit in \fR(default: \fItrue\fR) )

.HP
If a reset is necessary to heal an error
.TP
.B safety_latch.N.reset \fR bit in \fR(default: \fIfalse\fR)
( OR
.B <newinstname>.reset \fR bit in \fR(default: \fIfalse\fR) )

.HP
Reset input
.TP
.B safety_latch.N.threshold \fR s32 in \fR(default: \fI100\fR)
( OR
.B <newinstname>.threshold \fR s32 in \fR(default: \fI100\fR) )

.HP
Error output threshold
.TP
.B safety_latch.N.min \fR s32 in \fR(default: \fI0\fR)
( OR
.B <newinstname>.min \fR s32 in \fR(default: \fI0\fR) )

.HP
Minimum count
.TP
.B safety_latch.N.max \fR s32 in \fR(default: \fI1000\fR)
( OR
.B <newinstname>.max \fR s32 in \fR(default: \fI1000\fR) )

.HP
Maximum count
.TP
.B safety_latch.N.enable \fR bit in \fR(default: \fItrue\fR)
( OR
.B <newinstname>.enable \fR bit in \fR(default: \fItrue\fR) )

.HP
If not enabled the error count is passed to the output
.TP
.B safety_latch.N.count \fR s32 out \fR(default: \fI0\fR)
( OR
.B <newinstname>.count \fR s32 out \fR(default: \fI0\fR) )

.HP
Current count
.TP
.B safety_latch.N.error_out \fR bit out \fR(default: \fIfalse\fR)
( OR
.B <newinstname>.error_out \fR bit out \fR(default: \fIfalse\fR) )

.HP
Error output
.TP
.B safety_latch.N.ok_out \fR bit out \fR(default: \fItrue\fR)
( OR
.B <newinstname>.ok_out \fR bit out \fR(default: \fItrue\fR) )

.HP
Ok output
.SH AUTHOR
.HP
.HP
Alexander Roessler
.HP
.SH LICENCE
.HP
.HP
GPL
.HP
